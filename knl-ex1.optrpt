Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -o knl-ex1 -qopt-report=5 -xMIC-AVX512 -g

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/5=20.0%] knl-ex1.c(74,34)
  -> EXTERN: (80,3) time(time_t *)
  -> EXTERN: (81,19) localtime(const time_t *)
  -> EXTERN: (82,3) printf(const char *__restrict__, ...)
  -> EXTERN: (82,43) asctime(const struct tm *)
  -> INLINE: (84,3) fillarray() (isz = 81) (sz = 84)
    -> EXTERN: (21,3) srand(unsigned int)
    -> EXTERN: (21,9) time(time_t *)
    -> EXTERN: (23,16) malloc(unsigned long long)
    -> EXTERN: (24,16) malloc(unsigned long long)
    -> EXTERN: (25,16) malloc(unsigned long long)
    -> EXTERN: (27,10) rand(void)
    -> EXTERN: (30,12) rand(void)
  -> EXTERN: (86,3) time(time_t *)
  -> EXTERN: (87,17) localtime(const time_t *)
  -> EXTERN: (88,3) printf(const char *__restrict__, ...)
  -> EXTERN: (88,44) asctime(const struct tm *)
  -> EXTERN: (90,3) time(time_t *)
  -> EXTERN: (91,19) localtime(const time_t *)
  -> EXTERN: (92,3) printf(const char *__restrict__, ...)
  -> EXTERN: (92,44) asctime(const struct tm *)
  -> INLINE: (95,5) sumArray() (isz = 24) (sz = 27)
  -> INLINE: (96,5) sumArray2() (isz = 24) (sz = 27)
  -> EXTERN: (99,3) time(time_t *)
  -> EXTERN: (100,17) localtime(const time_t *)
  -> EXTERN: (102,3) printf(const char *__restrict__, ...)
  -> EXTERN: (102,44) asctime(const struct tm *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at knl-ex1.c(29,3) inlined into knl-ex1.c(84,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at knl-ex1.c(33,5) inlined into knl-ex1.c(84,3)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(34,7) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(35,7) ]
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(36,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.862
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at knl-ex1.c(33,5) inlined into knl-ex1.c(84,3)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(34,7) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(35,7) ]
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(36,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 17 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 13.700 
      remark #15487: type converts: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at knl-ex1.c(33,5) inlined into knl-ex1.c(84,3)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(34,7) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(35,7) ]
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(36,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.862
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at knl-ex1.c(33,5) inlined into knl-ex1.c(84,3)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at knl-ex1.c(33,5) inlined into knl-ex1.c(84,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at knl-ex1.c(94,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at knl-ex1.c(46,3) inlined into knl-ex1.c(95,5)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(47,7) ]
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(47,18) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(47,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at knl-ex1.c(46,3) inlined into knl-ex1.c(95,5)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(47,7) ]
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(47,18) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(47,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 15.000 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at knl-ex1.c(46,3) inlined into knl-ex1.c(95,5)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(47,7) ]
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(47,18) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(47,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at knl-ex1.c(46,3) inlined into knl-ex1.c(95,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at knl-ex1.c(46,3) inlined into knl-ex1.c(95,5)
   <Remainder, Multiversioned v2>
   LOOP END

   LOOP BEGIN at knl-ex1.c(57,3) inlined into knl-ex1.c(96,5)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(58,7) ]
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(58,18) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(58,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at knl-ex1.c(57,3) inlined into knl-ex1.c(96,5)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(58,7) ]
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(58,18) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(58,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 0.370 
      remark #15478: estimated potential speedup: 15.000 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at knl-ex1.c(57,3) inlined into knl-ex1.c(96,5)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(58,7) ]
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(58,18) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(58,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 1.167
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at knl-ex1.c(57,3) inlined into knl-ex1.c(96,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at knl-ex1.c(57,3) inlined into knl-ex1.c(96,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

knl-ex1.c(74,34):remark #34051: REGISTER ALLOCATION : [main] knl-ex1.c:74

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11 k1]
        
    Routine temporaries
        Total         :     369
            Global    :     148
            Local     :     221
        Regenerable   :      33
        Spilled       :      31
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       2 [2.00e+00 ~ 0.1%]
            Writes    :       2 [2.00e+00 ~ 0.1%]
        Spills        :     248 bytes*
            Reads     :     110 [1.08e+02 ~ 3.9%]
            Writes    :      74 [5.33e+01 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: fillarray()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (fillarray()) [2/5=40.0%] knl-ex1.c(15,18)
  -> EXTERN: (21,3) srand(unsigned int)
  -> EXTERN: (21,9) time(time_t *)
  -> EXTERN: (23,16) malloc(unsigned long long)
  -> EXTERN: (24,16) malloc(unsigned long long)
  -> EXTERN: (25,16) malloc(unsigned long long)
  -> EXTERN: (27,10) rand(void)
  -> EXTERN: (30,12) rand(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at knl-ex1.c(29,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at knl-ex1.c(33,5)
   <Peeled loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(34,7) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(35,7) ]
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(36,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.862
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at knl-ex1.c(33,5)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(34,7) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(35,7) ]
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(36,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.625
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 17 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 13.700 
      remark #15487: type converts: 3 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at knl-ex1.c(33,5)
   <Remainder loop for vectorization, Multiversioned v1>
      remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(34,7) ]
      remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(35,7) ]
      remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(36,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.862
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at knl-ex1.c(33,5)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at knl-ex1.c(33,5)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

knl-ex1.c(15,18):remark #34051: REGISTER ALLOCATION : [fillarray] knl-ex1.c:15

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11 k1]
        
    Routine temporaries
        Total         :     186
            Global    :      77
            Local     :     109
        Regenerable   :       7
        Spilled       :      21
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     168 bytes*
            Reads     :      49 [7.74e+01 ~ 5.6%]
            Writes    :      23 [2.92e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: sumArray()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sumArray()) [3/5=60.0%] knl-ex1.c(41,17)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at knl-ex1.c(46,3)
<Peeled loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(47,7) ]
   remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(47,18) ]
   remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(47,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at knl-ex1.c(46,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(47,7) ]
   remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(47,18) ]
   remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(47,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 1.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 15.000 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at knl-ex1.c(46,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(47,7) ]
   remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(47,18) ]
   remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(47,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at knl-ex1.c(46,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at knl-ex1.c(46,3)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

knl-ex1.c(41,17):remark #34051: REGISTER ALLOCATION : [sumArray] knl-ex1.c:41

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi r8-r12 zmm0-zmm5 k1]
        
    Routine temporaries
        Total         :      72
            Global    :      34
            Local     :      38
        Regenerable   :       2
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.7%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: sumArray2()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sumArray2()) [4/5=80.0%] knl-ex1.c(52,18)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at knl-ex1.c(57,3)
<Peeled loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(58,7) ]
   remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(58,18) ]
   remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(58,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: PEEL LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at knl-ex1.c(57,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(58,7) ]
   remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(58,18) ]
   remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(58,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 1.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 15.000 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at knl-ex1.c(57,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference a[auxcont] has unaligned access   [ knl-ex1.c(58,7) ]
   remark #15389: vectorization support: reference o[auxcont] has unaligned access   [ knl-ex1.c(58,18) ]
   remark #15389: vectorization support: reference b[auxcont] has unaligned access   [ knl-ex1.c(58,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at knl-ex1.c(57,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at knl-ex1.c(57,3)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

knl-ex1.c(52,18):remark #34051: REGISTER ALLOCATION : [sumArray2] knl-ex1.c:52

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rsi rdi r8-r12 zmm0-zmm5 k1]
        
    Routine temporaries
        Total         :      72
            Global    :      34
            Local     :      38
        Regenerable   :       2
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 0.7%]
            Writes    :       1 [1.00e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: sumArrayNOVEC()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sumArrayNOVEC()) [5/5=100.0%] knl-ex1.c(63,22)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at knl-ex1.c(68,3)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15319: loop was not vectorized: novector directive used
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at knl-ex1.c(68,3)
<Remainder, Multiversioned v1>
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at knl-ex1.c(68,3)
<Multiversioned v2>
   remark #15319: loop was not vectorized: novector directive used
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at knl-ex1.c(68,3)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

knl-ex1.c(63,22):remark #34051: REGISTER ALLOCATION : [sumArrayNOVEC] knl-ex1.c:63

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm15]
        
    Routine temporaries
        Total         :      79
            Global    :      17
            Local     :      62
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
