Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -c -qopenmp -mkl -xhost -qopt-report=5 -qopt-report-file=Binning.o.optrpt -o Binning.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/28=3.6%] Binning.cc(491,33)
  -> INLINE (MANUAL): (491,33) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 20) (sz = 25)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
      -> INLINE (MANUAL): (301,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 24) (sz = 31)
      -> INLINE (MANUAL): (240,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 5)
      -> (245,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 11) (sz = 20)
         [[ Callee not marked with inlining pragma  <1>]]
      -> EXTERN: (249,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
    -> DELETED: /usr/include/c++/4.8.5/bits/basic_string.h:(539,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
  -> INLINE (MANUAL): (491,33) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 20) (sz = 25)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
      -> INLINE (MANUAL): (301,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 24) (sz = 31)
      -> INLINE (MANUAL): (240,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 5)
      -> INLINE (MANUAL): (245,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 11) (sz = 20)
        -> INLINE (MANUAL): /usr/include/c++/4.8.5/ext/atomicity.h:(81,9) __gthread_active_p() (isz = 1) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/4.8.5/ext/atomicity.h:(82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
          -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
        -> INLINE (MANUAL): /usr/include/c++/4.8.5/ext/atomicity.h:(84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)
      -> EXTERN: (249,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
    -> DELETED: /usr/include/c++/4.8.5/bits/basic_string.h:(539,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
  -> EXTERN: (501,3) printf(const char *, ...)
  -> EXTERN: (511,8) omp_get_wtime()
  -> EXTERN: (511,25) printf(const char *, ...)
  -> EXTERN: (511,59) fflush(FILE *)
  -> EXTERN: (515,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (516,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (532,3) vslNewStream(VSLStreamStatePtr *, int, unsigned int)
  -> EXTERN: (533,3) vsRngUniform(int, VSLStreamStatePtr, int, float *, float, float)
  -> EXTERN: (534,3) vsRngUniform(int, VSLStreamStatePtr, int, float *, float, float)
  -> EXTERN: (536,8) omp_get_wtime()
  -> EXTERN: (536,25) printf(const char *, ...)
  -> EXTERN: (536,68) fflush(FILE *)
  -> EXTERN: (539,8) omp_get_wtime()
  -> EXTERN: (539,25) printf(const char *, ...)
  -> EXTERN: (539,66) fflush(FILE *)
  -> INLINE: (540,3) BinParticlesReference(const InputDataType &, BinsType &) (isz = 54) (sz = 61)
    -> EXTERN: (71,36) cosf(float)
    -> EXTERN: (72,36) sinf(float)
  -> EXTERN: (541,8) omp_get_wtime()
  -> EXTERN: (541,25) printf(const char *, ...)
  -> EXTERN: (541,68) fflush(FILE *)
  -> DELETED: (547,21) std::allocator<char>::~allocator(std::allocator<char> *) (isz = 0) (sz = 3)
  -> INLINE (MANUAL): (551,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 20) (sz = 25)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
      -> INLINE (MANUAL): (301,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 24) (sz = 31)
      -> INLINE (MANUAL): (240,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 5)
      -> (245,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 11) (sz = 20)
         [[ Callee not marked with inlining pragma  <1>]]
      -> EXTERN: (249,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
    -> DELETED: /usr/include/c++/4.8.5/bits/basic_string.h:(539,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
  -> DELETED: (551,5) std::allocator<char>::~allocator(std::allocator<char> *) (isz = 0) (sz = 3)
  -> EXTERN: (551,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, const char *, const std::allocator<char> &)
  -> DELETED: (551,5) std::allocator<char>::allocator(std::allocator<char> *) (isz = 2) (sz = 7)
  -> EXTERN: (571,3) printf(const char *, ...)
  -> EXTERN: (571,32) fflush(FILE *)
  -> DELETED: (579,5) std::allocator<char>::~allocator(std::allocator<char> *) (isz = 0) (sz = 3)
  -> EXTERN: (579,5) printf(const char *, ...)
  -> INLINE (MANUAL): (579,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 20) (sz = 25)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
      -> INLINE (MANUAL): (301,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 24) (sz = 31)
      -> INLINE (MANUAL): (240,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 5)
      -> INLINE (MANUAL): (245,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 11) (sz = 20)
        -> INLINE (MANUAL): /usr/include/c++/4.8.5/ext/atomicity.h:(81,9) __gthread_active_p() (isz = 1) (sz = 5)
        -> INLINE (MANUAL): /usr/include/c++/4.8.5/ext/atomicity.h:(82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
          -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
        -> INLINE (MANUAL): /usr/include/c++/4.8.5/ext/atomicity.h:(84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)
      -> EXTERN: (249,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
    -> DELETED: /usr/include/c++/4.8.5/bits/basic_string.h:(539,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
  -> DELETED: (580,20) std::allocator<char>::allocator(std::allocator<char> *) (isz = 2) (sz = 7)
  -> INLINE (MANUAL): (580,20) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) (isz = 20) (sz = 25)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,9) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_rep(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
      -> INLINE (MANUAL): (301,44) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 6)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(539,19) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_dispose(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &) (isz = 24) (sz = 31)
      -> INLINE (MANUAL): (240,34) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_S_empty_rep() (isz = 0) (sz = 5)
      -> (245,12) __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int) (isz = 11) (sz = 20)
         [[ Callee not marked with inlining pragma  <1>]]
      -> EXTERN: (249,5) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep::_M_destroy(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Rep *, const std::allocator<char> &)
    -> DELETED: /usr/include/c++/4.8.5/bits/basic_string.h:(539,36) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::get_allocator(std::basic_string<char, std::char_traits<char>, std::allocator<char>>::allocator_type *, const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 2) (sz = 9)
  -> EXTERN: (580,20) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::basic_string<char, std::char_traits<char>, std::allocator<char>>::size_type, char, const std::allocator<char> &)
  -> DELETED: (580,20) std::allocator<char>::~allocator(std::allocator<char> *) (isz = 0) (sz = 3)
  -> INLINE (MANUAL): (580,25) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::c_str(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 1) (sz = 8)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(1801,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 6)
  -> INLINE (MANUAL): (580,74) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::c_str(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 1) (sz = 8)
    -> INLINE (MANUAL): /usr/include/c++/4.8.5/bits/basic_string.h:(1801,16) std::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(const std::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const (isz = 0) (sz = 6)
  -> EXTERN: (583,5) printf(const char *, ...)
  -> EXTERN: (595,12) omp_get_wtime()
  -> INDIRECT: raddr(_Z14BinParticles_7RK13InputDataTypeRA10_A10_i)(P64)
     -gpt-> _Z14BinParticles_7RK13InputDataTypeRA10_A10_i
      -> INLINE: (596,7) BinParticles_7(const InputDataType &, BinsType &) (isz = 206) (sz = 213)
        -> EXTERN: (390,78) _vla_free(void *, long)
        -> EXTERN: (398,24) omp_get_max_threads()
        -> EXTERN: (409,18) _vla_alloc(long)
        -> EXTERN: (417,25) omp_get_thread_num()
        -> EXTERN: (440,23) cosf(float)
        -> EXTERN: (441,30) sinf(float)
  -> EXTERN: (597,12) omp_get_wtime()
  -> INLINE: (600,19) ValidateResults(const BinsType &, const BinsType &) (isz = 97) (sz = 104)
    -> EXTERN: (478,5) printf(const char *, ...)
    -> EXTERN: (482,4) printf(const char *, ...)
    -> EXTERN: (483,2) printf(const char *, ...)
    -> EXTERN: (485,5) exit(int)
  -> EXTERN: (610,2) printf(const char *, ...)
  -> EXTERN: (613,2) printf(const char *, ...)
  -> EXTERN: (617,7) fflush(FILE *)
  -> EXTERN: (623,5) printf(const char *, ...)
  -> EXTERN: (624,5) printf(const char *, ...)
  -> EXTERN: (626,5) printf(const char *, ...)
  -> EXTERN: (627,5) printf(const char *, ...)
  -> EXTERN: (628,5) printf(const char *, ...)
  -> EXTERN: (628,58) fflush(FILE *)
  -> EXTERN: (633,3) _mm_free(void *)
  -> EXTERN: (634,3) _mm_free(void *)


    Report from: OpenMP optimizations [openmp]

Binning.cc(519:1-519:1):OMP:main:  OpenMP DEFINED LOOP WAS PARALLELIZED
Binning.cc(413:1-413:1):OMP:main:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at Binning.cc(528,3)
   remark #15388: vectorization support: reference binnedDataRef[$i1] has aligned access
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 6
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 8.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at Binning.cc(528,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference binnedDataRef[$i1] has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at Binning.cc(68,3) inlined into Binning.cc(540,3)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference rawData.phi[i] has unaligned access   [ Binning.cc(71,40) ]
   remark #15389: vectorization support: reference rawData.r[i] has unaligned access   [ Binning.cc(71,21) ]
   remark #15389: vectorization support: reference rawData.r[i] has unaligned access   [ Binning.cc(72,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.068
   remark #15301: PEEL LOOP WAS VECTORIZED

   LOOP BEGIN at <compiler generated>
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(68,3) inlined into Binning.cc(540,3)
   remark #15389: vectorization support: reference rawData.phi[i] has unaligned access   [ Binning.cc(71,40) ]
   remark #15389: vectorization support: reference rawData.r[i] has unaligned access   [ Binning.cc(71,21) ]
   remark #15389: vectorization support: reference rawData.r[i] has unaligned access   [ Binning.cc(72,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <binnedDataRef[:][:]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(79,5) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <binnedDataRef[:][:]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(79,5) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.073
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 251 
   remark #15477: vector cost: 32.750 
   remark #15478: estimated potential speedup: 7.170 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 4 
   remark #15488: --- end vector cost summary ---
   remark #15499: histogram: 2 

   LOOP BEGIN at <compiler generated>
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(68,3) inlined into Binning.cc(540,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference rawData.phi[i] has unaligned access   [ Binning.cc(71,40) ]
   remark #15389: vectorization support: reference rawData.r[i] has unaligned access   [ Binning.cc(71,21) ]
   remark #15389: vectorization support: reference rawData.r[i] has unaligned access   [ Binning.cc(72,21) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.068
   remark #15301: REMAINDER LOOP WAS VECTORIZED

   LOOP BEGIN at <compiler generated>
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(592,7)
   remark #15388: vectorization support: reference binnedData[$i1] has aligned access
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 6
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 8.330 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at Binning.cc(592,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference binnedData[$i1] has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at Binning.cc(456,5) inlined into Binning.cc(596,7)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 2 1 3 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ Binning.cc(456,5) ]

   LOOP BEGIN at Binning.cc(455,3) inlined into Binning.cc(596,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at Binning.cc(457,7) inlined into Binning.cc(596,7)
         remark #15389: vectorization support: reference binnedData[i][j] has unaligned access   [ Binning.cc(458,4) ]
         remark #15389: vectorization support: reference binnedData[i][j] has unaligned access   [ Binning.cc(458,4) ]
         remark #15389: vectorization support: reference &globalBins[iThread][i][j] has unaligned access   [ Binning.cc(458,37) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15389: vectorization support: reference binnedData[i][j] has unaligned access   [ Binning.cc(458,4) ]
         remark #15389: vectorization support: reference binnedData[i][j] has unaligned access   [ Binning.cc(458,4) ]
         remark #15389: vectorization support: reference &globalBins[iThread][i][j] has unaligned access   [ Binning.cc(458,37) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.643
         remark #15300: LOOP WAS VECTORIZED
         remark #15456: masked unaligned unit stride loads: 2 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 0.870 
         remark #15478: estimated potential speedup: 2.600 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(472,3) inlined into Binning.cc(600,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Binning.cc(473,5) inlined into Binning.cc(600,19)
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.591
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 2.750 
      remark #15478: estimated potential speedup: 3.410 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at Binning.cc(473,5) inlined into Binning.cc(600,19)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(481,2) inlined into Binning.cc(600,19)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ Binning.cc(482,4) ]
LOOP END

LOOP BEGIN at Binning.cc(519,1)
<Peeled loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference rawData has unaligned access   [ Binning.cc(521,5) ]
   remark #15389: vectorization support: reference rawData has unaligned access   [ Binning.cc(522,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.947
   remark #25015: Estimate of max trip count of loop=31
LOOP END

LOOP BEGIN at Binning.cc(519,1)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15389: vectorization support: reference rawData has unaligned access   [ Binning.cc(521,5) ]
   remark #15388: vectorization support: reference rawData has aligned access   [ Binning.cc(522,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15412: vectorization support: streaming store was generated for rawData   [ Binning.cc(522,5) ]
   remark #15412: vectorization support: streaming store was generated for rawData   [ Binning.cc(522,5) ]
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.929
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 15.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at Binning.cc(519,1)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference rawData has unaligned access   [ Binning.cc(521,5) ]
   remark #15389: vectorization support: reference rawData has unaligned access   [ Binning.cc(522,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.059
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at Binning.cc(519,1)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at Binning.cc(519,1)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at Binning.cc(422,5) inlined into Binning.cc(596,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at Binning.cc(423,7) inlined into Binning.cc(596,7)
      remark #15389: vectorization support: reference myBins[i][j] has unaligned access   [ Binning.cc(424,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15389: vectorization support: reference myBins[i][j] has unaligned access   [ Binning.cc(424,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.429
      remark #15300: LOOP WAS VECTORIZED
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(428,5) inlined into Binning.cc(596,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Binning.cc(438,7) inlined into Binning.cc(596,7)
      remark #15388: vectorization support: reference phi[c] has aligned access   [ Binning.cc(440,27) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(440,18) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(441,25) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(444,2) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(445,2) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.040
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 234 
      remark #15477: vector cost: 6.310 
      remark #15478: estimated potential speedup: 35.650 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at Binning.cc(449,7) inlined into Binning.cc(596,7)
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(450,15) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(450,22) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(450,15) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(450,22) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <myBins[iX[c]][iY[c]]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(450,8) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <myBins[iX[c]][iY[c]]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(450,8) ]
      remark #15305: vectorization support: vector length 2
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 19.500 
      remark #15478: estimated potential speedup: 0.660 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
      remark #15499: histogram: 2 
      remark #25436: completely unrolled by 16  
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at Binning.cc(589,5)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ Binning.cc(595,12) ]
LOOP END

LOOP BEGIN at Binning.cc(479,5) inlined into Binning.cc(600,19)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ Binning.cc(482,4) ]
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(491,33):remark #34051: REGISTER ALLOCATION : [main] Binning.cc:491

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   49[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm31 k0-k3]
        
    Routine temporaries
        Total         :     954
            Global    :     210
            Local     :     744
        Regenerable   :     286
        Spilled       :      20
        
    Routine stack
        Variables     :    1202 bytes*
            Reads     :      69 [3.46e+03 ~ 17.1%]
            Writes    :      41 [1.30e+03 ~ 6.5%]
        Spills        :     528 bytes*
            Reads     :      35 [6.13e+01 ~ 0.3%]
            Writes    :      36 [4.07e+01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__gnu_cxx::__exchange_and_add_dispatch(_Atomic_word *, int)) [2/28=7.1%] /usr/include/c++/4.8.5/ext/atomicity.h(79,3)
  -> INLINE (MANUAL): (81,9) __gthread_active_p() (isz = 1) (sz = 5)
  -> INLINE (MANUAL): (82,14) __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int) (isz = 4) (sz = 13)
    -> EXTERN: (49,12) __atomic_fetch_add_4(volatile void *, unsigned int, int)
  -> INLINE (MANUAL): (84,14) __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int) (isz = 3) (sz = 12)


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/ext/atomicity.h(79,3):remark #34051: REGISTER ALLOCATION : [_ZN9__gnu_cxx27__exchange_and_add_dispatchEPii] /usr/include/c++/4.8.5/ext/atomicity.h:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rcx rsi rdi]
        
    Routine temporaries
        Total         :      17
            Global    :       8
            Local     :       9
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gthread_active_p()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gthread_active_p()) /usr/include/c++/4.8.5/x86_64-redhat-linux/bits/gthr-default.h(248,1)

===========================================================================

Begin optimization report for: BinParticlesReference(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticlesReference(const InputDataType &, BinsType &)) [7/28=25.0%] Binning.cc(63,85)
  -> EXTERN: (71,36) cosf(float)
  -> EXTERN: (72,36) sinf(float)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at Binning.cc(68,3)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(63,85):remark #34051: REGISTER ALLOCATION : [_Z21BinParticlesReferenceRK13InputDataTypeRA10_A10_i] Binning.cc:63

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3 zmm16]
        
    Routine temporaries
        Total         :      32
            Global    :      13
            Local     :      19
        Regenerable   :       2
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [4.50e+00 ~ 3.4%]
            Writes    :       5 [4.50e+00 ~ 3.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BinParticles_1(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles_1(const InputDataType &, BinsType &)) [8/28=28.6%] Binning.cc(88,78)
  -> EXTERN: (97,36) cosf(float)
  -> EXTERN: (98,36) sinf(float)


    Report from: OpenMP optimizations [openmp]

Binning.cc(107:5-107:5):OMP:_Z14BinParticles_1RK13InputDataTypeRA10_A10_i:  OpenMP multithreaded code generation for ATOMIC was successful
Binning.cc(93:1-93:1):OMP:_Z14BinParticles_1RK13InputDataTypeRA10_A10_i:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at Binning.cc(94,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(88,78):remark #34051: REGISTER ALLOCATION : [_Z14BinParticles_1RK13InputDataTypeRA10_A10_i] Binning.cc:88

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3 zmm16]
        
    Routine temporaries
        Total         :     117
            Global    :      20
            Local     :      97
        Regenerable   :      45
        Spilled       :       0
        
    Routine stack
        Variables     :      36 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       7 [2.30e+01 ~ 7.6%]
        Spills        :      48 bytes*
            Reads     :      12 [6.00e+00 ~ 2.0%]
            Writes    :      12 [1.20e+01 ~ 4.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BinParticles_2(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles_2(const InputDataType &, BinsType &)) [9/28=32.1%] Binning.cc(115,78)
  -> EXTERN: (133,38) cosf(float)
  -> EXTERN: (134,38) sinf(float)


    Report from: OpenMP optimizations [openmp]

Binning.cc(148:2-148:2):OMP:_Z14BinParticles_2RK13InputDataTypeRA10_A10_i:  OpenMP multithreaded code generation for ATOMIC was successful
Binning.cc(120:1-120:1):OMP:_Z14BinParticles_2RK13InputDataTypeRA10_A10_i:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at Binning.cc(124,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at Binning.cc(125,7)
      remark #15389: vectorization support: reference threadPrivateBins[i][j] has unaligned access   [ Binning.cc(126,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15389: vectorization support: reference threadPrivateBins[i][j] has unaligned access   [ Binning.cc(126,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.429
      remark #15300: LOOP WAS VECTORIZED
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(129,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference inputData->phi[i] has unaligned access   [ Binning.cc(133,42) ]
   remark #15389: vectorization support: reference inputData->r[i] has unaligned access   [ Binning.cc(133,23) ]
   remark #15389: vectorization support: reference inputData->r[i] has unaligned access   [ Binning.cc(134,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.064
   remark #15301: PEEL LOOP WAS VECTORIZED

   LOOP BEGIN at <compiler generated>
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(129,1)
   remark #15389: vectorization support: reference inputData->phi[i] has unaligned access   [ Binning.cc(133,42) ]
   remark #15389: vectorization support: reference inputData->r[i] has unaligned access   [ Binning.cc(133,23) ]
   remark #15389: vectorization support: reference inputData->r[i] has unaligned access   [ Binning.cc(134,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <threadPrivateBins[iX][iY]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(141,2) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <threadPrivateBins[iX][iY]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(141,2) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.066
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 237 
   remark #15477: vector cost: 32.250 
   remark #15478: estimated potential speedup: 6.870 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
   remark #15499: histogram: 2 

   LOOP BEGIN at <compiler generated>
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(129,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference inputData->phi[i] has unaligned access   [ Binning.cc(133,42) ]
   remark #15389: vectorization support: reference inputData->r[i] has unaligned access   [ Binning.cc(133,23) ]
   remark #15389: vectorization support: reference inputData->r[i] has unaligned access   [ Binning.cc(134,23) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.064
   remark #15301: REMAINDER LOOP WAS VECTORIZED

   LOOP BEGIN at <compiler generated>
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(145,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at Binning.cc(146,7)
      remark #15382: vectorization support: call to function __kmpc_atomic_fixed4_add cannot be vectorized   [ Binning.cc(148,2) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(115,78):remark #34051: REGISTER ALLOCATION : [_Z14BinParticles_2RK13InputDataTypeRA10_A10_i] Binning.cc:115

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   36[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm17 k0-k3]
        
    Routine temporaries
        Total         :     330
            Global    :      98
            Local     :     232
        Regenerable   :      88
        Spilled       :      16
        
    Routine stack
        Variables     :     456 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :      17 [3.30e+01 ~ 2.0%]
        Spills        :     448 bytes*
            Reads     :      33 [1.36e+02 ~ 8.3%]
            Writes    :      33 [3.10e+01 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BinParticles_3(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles_3(const InputDataType &, BinsType &)) [10/28=35.7%] Binning.cc(156,78)
  -> EXTERN: (184,23) cosf(float)
  -> EXTERN: (185,30) sinf(float)


    Report from: OpenMP optimizations [openmp]

Binning.cc(202:2-202:2):OMP:_Z14BinParticles_3RK13InputDataTypeRA10_A10_i:  OpenMP multithreaded code generation for ATOMIC was successful
Binning.cc(163:1-163:1):OMP:_Z14BinParticles_3RK13InputDataTypeRA10_A10_i:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at Binning.cc(167,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at Binning.cc(168,7)
      remark #15389: vectorization support: reference threadPrivateBins[i][j] has unaligned access   [ Binning.cc(169,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15389: vectorization support: reference threadPrivateBins[i][j] has unaligned access   [ Binning.cc(169,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.429
      remark #15300: LOOP WAS VECTORIZED
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(173,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Binning.cc(182,7)
      remark #25427: Loop Statements Reordered
      remark #15389: vectorization support: reference phi[c] has unaligned access   [ Binning.cc(185,34) ]
      remark #15389: vectorization support: reference r[c] has unaligned access   [ Binning.cc(185,25) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(189,2) ]
      remark #15389: vectorization support: reference r[c] has unaligned access   [ Binning.cc(184,18) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(188,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.097
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 234 
      remark #15477: vector cost: 6.430 
      remark #15478: estimated potential speedup: 33.130 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at Binning.cc(193,7)
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(194,26) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(194,33) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(194,26) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(194,33) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <threadPrivateBins[iX[c]][iY[c]]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(194,8) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <threadPrivateBins[iX[c]][iY[c]]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(194,8) ]
      remark #15305: vectorization support: vector length 2
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 19.500 
      remark #15478: estimated potential speedup: 0.660 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
      remark #15499: histogram: 2 
      remark #25436: completely unrolled by 16  
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(199,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at Binning.cc(200,7)
      remark #15382: vectorization support: call to function __kmpc_atomic_fixed4_add cannot be vectorized   [ Binning.cc(202,2) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(156,78):remark #34051: REGISTER ALLOCATION : [_Z14BinParticles_3RK13InputDataTypeRA10_A10_i] Binning.cc:156

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5 zmm16-zmm17 k1]
        
    Routine temporaries
        Total         :     220
            Global    :      33
            Local     :     187
        Regenerable   :      68
        Spilled       :       3
        
    Routine stack
        Variables     :     720 bytes*
            Reads     :      36 [1.60e+02 ~ 8.0%]
            Writes    :      19 [4.30e+01 ~ 2.2%]
        Spills        :      64 bytes*
            Reads     :      13 [1.25e+02 ~ 6.3%]
            Writes    :      13 [3.10e+01 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BinParticles_4(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles_4(const InputDataType &, BinsType &)) [11/28=39.3%] Binning.cc(209,78)
  -> EXTERN: (238,23) cosf(float)
  -> EXTERN: (239,30) sinf(float)


    Report from: OpenMP optimizations [openmp]

Binning.cc(256:2-256:2):OMP:_Z14BinParticles_4RK13InputDataTypeRA10_A10_i:  OpenMP multithreaded code generation for ATOMIC was successful
Binning.cc(216:1-216:1):OMP:_Z14BinParticles_4RK13InputDataTypeRA10_A10_i:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at Binning.cc(220,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at Binning.cc(221,7)
      remark #15389: vectorization support: reference threadPrivateBins[i][j] has unaligned access   [ Binning.cc(222,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15389: vectorization support: reference threadPrivateBins[i][j] has unaligned access   [ Binning.cc(222,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.429
      remark #15300: LOOP WAS VECTORIZED
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(226,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Binning.cc(236,7)
      remark #15388: vectorization support: reference phi[c] has aligned access   [ Binning.cc(238,27) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(238,18) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(239,25) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(242,2) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(243,2) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.040
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 234 
      remark #15477: vector cost: 6.310 
      remark #15478: estimated potential speedup: 35.650 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at Binning.cc(247,7)
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(248,26) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(248,33) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(248,26) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(248,33) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <threadPrivateBins[iX[c]][iY[c]]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(248,8) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <threadPrivateBins[iX[c]][iY[c]]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(248,8) ]
      remark #15305: vectorization support: vector length 2
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 19.500 
      remark #15478: estimated potential speedup: 0.660 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
      remark #15499: histogram: 2 
      remark #25436: completely unrolled by 16  
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(253,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at Binning.cc(254,7)
      remark #15382: vectorization support: call to function __kmpc_atomic_fixed4_add cannot be vectorized   [ Binning.cc(256,2) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(209,78):remark #34051: REGISTER ALLOCATION : [_Z14BinParticles_4RK13InputDataTypeRA10_A10_i] Binning.cc:209

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5 zmm16-zmm17 k1]
        
    Routine temporaries
        Total         :     220
            Global    :      33
            Local     :     187
        Regenerable   :      68
        Spilled       :       3
        
    Routine stack
        Variables     :     720 bytes*
            Reads     :      36 [1.60e+02 ~ 8.0%]
            Writes    :      19 [4.30e+01 ~ 2.2%]
        Spills        :      64 bytes*
            Reads     :      13 [1.25e+02 ~ 6.3%]
            Writes    :      13 [3.10e+01 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BinParticles_5(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles_5(const InputDataType &, BinsType &)) [12/28=42.9%] Binning.cc(264,78)
  -> EXTERN: (264,78) _vla_free(void *, long)
  -> EXTERN: (272,24) omp_get_max_threads()
  -> EXTERN: (276,7) _vla_alloc(long)
  -> EXTERN: (282,25) omp_get_thread_num()
  -> EXTERN: (304,23) cosf(float)
  -> EXTERN: (305,30) sinf(float)


    Report from: OpenMP optimizations [openmp]

Binning.cc(278:1-278:1):OMP:_Z14BinParticles_5RK13InputDataTypeRA10_A10_i:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at Binning.cc(320,5)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 2 3 1 )
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ Binning.cc(320,5) ]

   LOOP BEGIN at Binning.cc(321,7)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at Binning.cc(319,3)
         remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ Binning.cc(322,2) ]
         remark #15389: vectorization support: reference globalBins[i][j][iThread] has unaligned access   [ Binning.cc(322,22) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 3.143
         remark #15315: loop was not vectorized: estimated number of iterations (10) is insufficient for vectorization
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.750 
         remark #15478: estimated potential speedup: 0.600 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         remark #25457: Number of partial sums replaced: 1
      LOOP END

      LOOP BEGIN at Binning.cc(319,3)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(286,5)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at Binning.cc(287,7)
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <globalBins>, stride is unknown to compiler   [ Binning.cc(288,2) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15416: vectorization support: non-unit strided store was generated for the variable <globalBins>, masked, stride is unknown to compiler   [ Binning.cc(288,2) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 1.930 
      remark #15478: estimated potential speedup: 0.640 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 10  
   LOOP END

   LOOP BEGIN at Binning.cc(287,7)
   LOOP END

   LOOP BEGIN at Binning.cc(287,7)
   LOOP END

   LOOP BEGIN at Binning.cc(287,7)
   LOOP END

   LOOP BEGIN at Binning.cc(287,7)
   LOOP END

   LOOP BEGIN at Binning.cc(287,7)
   LOOP END

   LOOP BEGIN at Binning.cc(287,7)
   LOOP END

   LOOP BEGIN at Binning.cc(287,7)
   LOOP END

   LOOP BEGIN at Binning.cc(287,7)
   LOOP END

   LOOP BEGIN at Binning.cc(287,7)
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(292,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Binning.cc(302,7)
      remark #15388: vectorization support: reference phi[c] has aligned access   [ Binning.cc(304,27) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(304,18) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(305,25) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(308,2) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(309,2) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.040
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 234 
      remark #15477: vector cost: 6.310 
      remark #15478: estimated potential speedup: 35.650 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at Binning.cc(313,7)
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(314,19) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(314,26) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(314,19) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(314,26) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <globalBins>, 64-bit indexed, part of index is read from memory   [ Binning.cc(314,8) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <globalBins>, 64-bit indexed, part of index is read from memory   [ Binning.cc(314,8) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.024
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 14 
      remark #15477: vector cost: 20.500 
      remark #15478: estimated potential speedup: 0.670 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
      remark #15499: histogram: 2 
      remark #25436: completely unrolled by 16  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(264,78):remark #34051: REGISTER ALLOCATION : [_Z14BinParticles_5RK13InputDataTypeRA10_A10_i] Binning.cc:264

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm5 zmm16-zmm17]
        
    Routine temporaries
        Total         :     403
            Global    :      56
            Local     :     347
        Regenerable   :      68
        Spilled       :       9
        
    Routine stack
        Variables     :     336 bytes*
            Reads     :      38 [1.62e+02 ~ 2.8%]
            Writes    :      11 [3.50e+01 ~ 0.6%]
        Spills        :     104 bytes*
            Reads     :      21 [4.66e+01 ~ 0.8%]
            Writes    :      17 [3.47e+01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BinParticles_6(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles_6(const InputDataType &, BinsType &)) [13/28=46.4%] Binning.cc(327,78)
  -> EXTERN: (327,78) _vla_free(void *, long)
  -> EXTERN: (335,24) omp_get_max_threads()
  -> EXTERN: (338,7) _vla_alloc(long)
  -> EXTERN: (343,25) omp_get_thread_num()
  -> EXTERN: (365,23) cosf(float)
  -> EXTERN: (366,30) sinf(float)


    Report from: OpenMP optimizations [openmp]

Binning.cc(339:1-339:1):OMP:_Z14BinParticles_6RK13InputDataTypeRA10_A10_i:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at Binning.cc(381,5)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 2 1 3 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ Binning.cc(381,5) ]

   LOOP BEGIN at Binning.cc(380,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at Binning.cc(382,7)
         remark #15389: vectorization support: reference outputBins[i][j] has unaligned access   [ Binning.cc(383,2) ]
         remark #15389: vectorization support: reference outputBins[i][j] has unaligned access   [ Binning.cc(383,2) ]
         remark #15389: vectorization support: reference globalBins[iThread][i][j] has unaligned access   [ Binning.cc(383,22) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15389: vectorization support: reference outputBins[i][j] has unaligned access   [ Binning.cc(383,2) ]
         remark #15389: vectorization support: reference outputBins[i][j] has unaligned access   [ Binning.cc(383,2) ]
         remark #15389: vectorization support: reference globalBins[iThread][i][j] has unaligned access   [ Binning.cc(383,22) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.643
         remark #15300: LOOP WAS VECTORIZED
         remark #15456: masked unaligned unit stride loads: 2 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 0.870 
         remark #15478: estimated potential speedup: 2.600 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(347,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at Binning.cc(348,7)
      remark #15389: vectorization support: reference globalBins has unaligned access   [ Binning.cc(349,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15389: vectorization support: reference globalBins has unaligned access   [ Binning.cc(349,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.429
      remark #15300: LOOP WAS VECTORIZED
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(353,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Binning.cc(363,7)
      remark #15388: vectorization support: reference phi[c] has aligned access   [ Binning.cc(365,27) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(365,18) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(366,25) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(369,2) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(370,2) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.040
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 234 
      remark #15477: vector cost: 6.310 
      remark #15478: estimated potential speedup: 35.650 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at Binning.cc(374,7)
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(375,28) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(375,35) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(375,28) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(375,35) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <globalBins>, 64-bit indexed, part of index is read from memory   [ Binning.cc(375,8) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <globalBins>, 64-bit indexed, part of index is read from memory   [ Binning.cc(375,8) ]
      remark #15305: vectorization support: vector length 2
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 14 
      remark #15477: vector cost: 19.500 
      remark #15478: estimated potential speedup: 0.710 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
      remark #15499: histogram: 2 
      remark #25436: completely unrolled by 16  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(327,78):remark #34051: REGISTER ALLOCATION : [_Z14BinParticles_6RK13InputDataTypeRA10_A10_i] Binning.cc:327

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm5 zmm16-zmm17 k1]
        
    Routine temporaries
        Total         :     263
            Global    :      43
            Local     :     220
        Regenerable   :      65
        Spilled       :       3
        
    Routine stack
        Variables     :     320 bytes*
            Reads     :      37 [1.61e+02 ~ 10.0%]
            Writes    :       9 [3.30e+01 ~ 2.1%]
        Spills        :      56 bytes*
            Reads     :      12 [1.18e+01 ~ 0.7%]
            Writes    :      11 [5.80e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BinParticles_7(const InputDataType &, BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BinParticles_7(const InputDataType &, BinsType &)) [14/28=50.0%] Binning.cc(390,78)
  -> EXTERN: (390,78) _vla_free(void *, long)
  -> EXTERN: (398,24) omp_get_max_threads()
  -> EXTERN: (409,18) _vla_alloc(long)
  -> EXTERN: (417,25) omp_get_thread_num()
  -> EXTERN: (440,23) cosf(float)
  -> EXTERN: (441,30) sinf(float)


    Report from: OpenMP optimizations [openmp]

Binning.cc(413:1-413:1):OMP:_Z14BinParticles_7RK13InputDataTypeRA10_A10_i:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at Binning.cc(456,5)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 2 1 3 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ Binning.cc(456,5) ]

   LOOP BEGIN at Binning.cc(455,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at Binning.cc(457,7)
         remark #15389: vectorization support: reference outputBins[i][j] has unaligned access   [ Binning.cc(458,4) ]
         remark #15389: vectorization support: reference outputBins[i][j] has unaligned access   [ Binning.cc(458,4) ]
         remark #15389: vectorization support: reference &globalBins[iThread][i][j] has unaligned access   [ Binning.cc(458,37) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15389: vectorization support: reference outputBins[i][j] has unaligned access   [ Binning.cc(458,4) ]
         remark #15389: vectorization support: reference outputBins[i][j] has unaligned access   [ Binning.cc(458,4) ]
         remark #15389: vectorization support: reference &globalBins[iThread][i][j] has unaligned access   [ Binning.cc(458,37) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.643
         remark #15300: LOOP WAS VECTORIZED
         remark #15456: masked unaligned unit stride loads: 2 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 0.870 
         remark #15478: estimated potential speedup: 2.600 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(422,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25436: completely unrolled by 10  

   LOOP BEGIN at Binning.cc(423,7)
      remark #15389: vectorization support: reference myBins[i][j] has unaligned access   [ Binning.cc(424,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15389: vectorization support: reference myBins[i][j] has unaligned access   [ Binning.cc(424,2) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.429
      remark #15300: LOOP WAS VECTORIZED
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.430 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(428,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Binning.cc(438,7)
      remark #15388: vectorization support: reference phi[c] has aligned access   [ Binning.cc(440,27) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(440,18) ]
      remark #15388: vectorization support: reference r[c] has aligned access   [ Binning.cc(441,25) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(444,2) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(445,2) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.040
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 234 
      remark #15477: vector cost: 6.310 
      remark #15478: estimated potential speedup: 35.650 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at Binning.cc(449,7)
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(450,15) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(450,22) ]
      remark #15388: vectorization support: reference iX[c] has aligned access   [ Binning.cc(450,15) ]
      remark #15388: vectorization support: reference iY[c] has aligned access   [ Binning.cc(450,22) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <myBins[iX[c]][iY[c]]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(450,8) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <myBins[iX[c]][iY[c]]>, 64-bit indexed, part of index is read from memory   [ Binning.cc(450,8) ]
      remark #15305: vectorization support: vector length 2
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 19.500 
      remark #15478: estimated potential speedup: 0.660 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
      remark #15499: histogram: 2 
      remark #25436: completely unrolled by 16  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(390,78):remark #34051: REGISTER ALLOCATION : [_Z14BinParticles_7RK13InputDataTypeRA10_A10_i] Binning.cc:390

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm5 zmm16-zmm17 k1]
        
    Routine temporaries
        Total         :     253
            Global    :      39
            Local     :     214
        Regenerable   :      65
        Spilled       :       1
        
    Routine stack
        Variables     :     320 bytes*
            Reads     :      38 [2.51e+02 ~ 13.1%]
            Writes    :       9 [3.30e+01 ~ 1.7%]
        Spills        :      40 bytes*
            Reads     :       9 [4.90e+00 ~ 0.3%]
            Writes    :       9 [4.90e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ValidateResults(const BinsType &, const BinsType &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ValidateResults(const BinsType &, const BinsType &)) [15/28=53.6%] Binning.cc(467,83)
  -> EXTERN: (478,5) printf(const char *, ...)
  -> EXTERN: (482,4) printf(const char *, ...)
  -> EXTERN: (483,2) printf(const char *, ...)
  -> EXTERN: (485,5) exit(int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at Binning.cc(472,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at Binning.cc(473,5)
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.476
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 2.620 
      remark #15478: estimated potential speedup: 3.690 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at Binning.cc(473,5)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at Binning.cc(479,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at Binning.cc(481,2)
      remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ Binning.cc(482,4) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

Binning.cc(467,83):remark #34051: REGISTER ALLOCATION : [_Z15ValidateResultsRA10_A10_KiS2_] Binning.cc:467

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   37[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm14 zmm16-zmm21 k0-k1]
        
    Routine temporaries
        Total         :      69
            Global    :      23
            Local     :      46
        Regenerable   :      13
        Spilled       :       7
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      56 bytes*
            Reads     :       4 [4.15e+00 ~ 0.6%]
            Writes    :       7 [2.74e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *)) /usr/include/c++/4.8.5/ext/new_allocator.h(79,45)

===========================================================================

Begin optimization report for: __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const)) /usr/include/c++/4.8.5/ext/new_allocator.h(79,7)

===========================================================================

Begin optimization report for: __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *, const __gnu_cxx::new_allocator<char> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *, const __gnu_cxx::new_allocator<char> &)) /usr/include/c++/4.8.5/ext/new_allocator.h(81,65)

===========================================================================

Begin optimization report for: __gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::new_allocator<char>::new_allocator(__gnu_cxx::new_allocator<char> *const, const __gnu_cxx::new_allocator<char> &)) /usr/include/c++/4.8.5/ext/new_allocator.h(81,7)

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::__exchange_and_add(volatile _Atomic_word *, int)) /usr/include/c++/4.8.5/ext/atomicity.h(49,3)

===========================================================================

Begin optimization report for: __gnu_cxx::__exchange_and_add_single(_Atomic_word *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (__gnu_cxx::__exchange_and_add_single(_Atomic_word *, int)) /usr/include/c++/4.8.5/ext/atomicity.h(66,3)

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

