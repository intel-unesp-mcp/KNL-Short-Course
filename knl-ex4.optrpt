Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -o knl-ex4-avx512 -O3 -qopenmp -g -qopt-report=5 -xMIC-AVX512

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/4=25.0%] knl-ex4.c(80,34)
  -> EXTERN: (86,3) time(time_t *)
  -> EXTERN: (87,19) localtime(const time_t *)
  -> EXTERN: (88,3) printf(const char *__restrict__, ...)
  -> EXTERN: (88,43) asctime(const struct tm *)
  -> INLINE: (90,3) fillarray() (isz = 115) (sz = 118)
    -> EXTERN: (30,3) srand(unsigned int)
    -> EXTERN: (30,9) time(time_t *)
    -> EXTERN: (32,16) malloc(unsigned long long)
    -> EXTERN: (33,14) malloc(unsigned long long)
    -> EXTERN: (34,16) malloc(unsigned long long)
    -> EXTERN: (35,16) malloc(unsigned long long)
    -> EXTERN: (37,10) rand(void)
    -> EXTERN: (41,12) rand(void)
    -> EXTERN: (48,18) rand(void)
    -> EXTERN: (49,19) rand(void)
  -> EXTERN: (92,3) time(time_t *)
  -> EXTERN: (93,17) localtime(const time_t *)
  -> EXTERN: (94,3) printf(const char *__restrict__, ...)
  -> EXTERN: (94,44) asctime(const struct tm *)
  -> EXTERN: (96,3) time(time_t *)
  -> EXTERN: (97,19) localtime(const time_t *)
  -> EXTERN: (98,3) printf(const char *__restrict__, ...)
  -> EXTERN: (98,40) asctime(const struct tm *)
  -> INLINE: (104,5) sum4() (isz = 42) (sz = 45)
  -> EXTERN: (107,3) time(time_t *)
  -> EXTERN: (108,17) localtime(const time_t *)
  -> EXTERN: (110,3) printf(const char *__restrict__, ...)
  -> EXTERN: (110,40) asctime(const struct tm *)


    Report from: OpenMP optimizations [openmp]

knl-ex4.c(101:3-101:3):OMP:main:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at knl-ex4.c(40,3) inlined into knl-ex4.c(90,3)
   remark #15523: loop was not vectorized: loop control variable auxcont2 was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at knl-ex4.c(44,5) inlined into knl-ex4.c(90,3)
      remark #15523: loop was not vectorized: loop control variable auxcont was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at knl-ex4.c(70,27) inlined into knl-ex4.c(104,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at knl-ex4.c(70,3) inlined into knl-ex4.c(104,5)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference bb[auxcont] has unaligned access   [ knl-ex4.c(71,8) ]
      remark #15389: vectorization support: reference bb[auxcont] has unaligned access   [ knl-ex4.c(71,8) ]
      remark #15389: vectorization support: reference dd[auxcont] has unaligned access   [ knl-ex4.c(71,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.126
      remark #15301: PEEL LOOP WAS VECTORIZED

      LOOP BEGIN at <compiler generated>
         remark #15548: loop was vectorized along with the outer loop
      LOOP END
   LOOP END

   LOOP BEGIN at knl-ex4.c(70,3) inlined into knl-ex4.c(104,5)
      remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(71,8) ]
      remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(71,8) ]
      remark #15389: vectorization support: reference dd[auxcont] has unaligned access   [ knl-ex4.c(71,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15416: vectorization support: irregularly indexed store was generated for the variable <aa[bb[auxcont]]>, part of index is read from memory   [ knl-ex4.c(71,5) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <aa[bb[auxcont]]>, part of index is read from memory   [ knl-ex4.c(71,5) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.085
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 36 
      remark #15477: vector cost: 9.560 
      remark #15478: estimated potential speedup: 3.760 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
      remark #15499: histogram: 2 
      remark #25015: Estimate of max trip count of loop=10000000

      LOOP BEGIN at <compiler generated>
         remark #15548: loop was vectorized along with the outer loop
      LOOP END
   LOOP END

   LOOP BEGIN at knl-ex4.c(70,3) inlined into knl-ex4.c(104,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(71,8) ]
      remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(71,8) ]
      remark #15389: vectorization support: reference dd[auxcont] has unaligned access   [ knl-ex4.c(71,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.091
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=10000000

      LOOP BEGIN at <compiler generated>
         remark #15548: loop was vectorized along with the outer loop
      LOOP END
   LOOP END

   LOOP BEGIN at knl-ex4.c(74,3) inlined into knl-ex4.c(104,5)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference bb[auxcont] has unaligned access   [ knl-ex4.c(75,8) ]
      remark #15389: vectorization support: reference bb[auxcont] has unaligned access   [ knl-ex4.c(75,8) ]
      remark #15389: vectorization support: reference aa[auxcont] has unaligned access   [ knl-ex4.c(75,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.126
      remark #15301: PEEL LOOP WAS VECTORIZED

      LOOP BEGIN at <compiler generated>
         remark #15548: loop was vectorized along with the outer loop
      LOOP END
   LOOP END

   LOOP BEGIN at knl-ex4.c(74,3) inlined into knl-ex4.c(104,5)
      remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(75,8) ]
      remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(75,8) ]
      remark #15389: vectorization support: reference aa[auxcont] has unaligned access   [ knl-ex4.c(75,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15416: vectorization support: irregularly indexed store was generated for the variable <dd[bb[auxcont]]>, part of index is read from memory   [ knl-ex4.c(75,5) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <dd[bb[auxcont]]>, part of index is read from memory   [ knl-ex4.c(75,5) ]
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.085
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 36 
      remark #15477: vector cost: 9.560 
      remark #15478: estimated potential speedup: 3.760 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
      remark #15499: histogram: 2 
      remark #25015: Estimate of max trip count of loop=10000000

      LOOP BEGIN at <compiler generated>
         remark #15548: loop was vectorized along with the outer loop
      LOOP END
   LOOP END

   LOOP BEGIN at knl-ex4.c(74,3) inlined into knl-ex4.c(104,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(75,8) ]
      remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(75,8) ]
      remark #15389: vectorization support: reference aa[auxcont] has unaligned access   [ knl-ex4.c(75,26) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.091
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=10000000

      LOOP BEGIN at <compiler generated>
         remark #15548: loop was vectorized along with the outer loop
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

knl-ex4.c(80,34):remark #34051: REGISTER ALLOCATION : [main] knl-ex4.c:80

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm11 k0-k2]
        
    Routine temporaries
        Total         :     391
            Global    :     159
            Local     :     232
        Regenerable   :      91
        Spilled       :      12
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :       7 [2.10e+01 ~ 0.0%]
        Spills        :     136 bytes*
            Reads     :      22 [5.29e+06 ~ 17.1%]
            Writes    :      24 [7.70e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: fillarray()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (fillarray()) [2/4=50.0%] knl-ex4.c(23,18)
  -> EXTERN: (30,3) srand(unsigned int)
  -> EXTERN: (30,9) time(time_t *)
  -> EXTERN: (32,16) malloc(unsigned long long)
  -> EXTERN: (33,14) malloc(unsigned long long)
  -> EXTERN: (34,16) malloc(unsigned long long)
  -> EXTERN: (35,16) malloc(unsigned long long)
  -> EXTERN: (37,10) rand(void)
  -> EXTERN: (41,12) rand(void)
  -> EXTERN: (48,18) rand(void)
  -> EXTERN: (49,19) rand(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at knl-ex4.c(40,3)
   remark #15523: loop was not vectorized: loop control variable auxcont2 was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at knl-ex4.c(44,5)
      remark #15523: loop was not vectorized: loop control variable auxcont was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

knl-ex4.c(23,18):remark #34051: REGISTER ALLOCATION : [fillarray] knl-ex4.c:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      59
            Global    :      34
            Local     :      25
        Regenerable   :       1
        Spilled       :      17
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     136 bytes*
            Reads     :      17 [4.41e+06 ~ 14.7%]
            Writes    :      19 [7.70e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: sum3()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sum3()) [3/4=75.0%] knl-ex4.c(57,13)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at knl-ex4.c(60,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a[*(b+auxcont*4)] (62:5) and d[auxcont] (62:5)
   remark #15346: vector dependence: assumed ANTI dependence between d[auxcont] (62:5) and a[*(b+auxcont*4)] (62:5)
   remark #15346: vector dependence: assumed ANTI dependence between a[*(b+auxcont*4)] (62:5) and a[*(b+auxcont*4)] (62:5)
   remark #15346: vector dependence: assumed FLOW dependence between a[*(b+auxcont*4)] (62:5) and a[*(b+auxcont*4)] (62:5)
   remark #15346: vector dependence: assumed FLOW dependence between a[*(b+auxcont*4)] (62:5) and a[*(b+auxcont*4)] (62:5)
   remark #15346: vector dependence: assumed ANTI dependence between a[*(b+auxcont*4)] (62:5) and a[*(b+auxcont*4)] (62:5)
   remark #25439: unrolled with remainder by 4  
LOOP END

LOOP BEGIN at knl-ex4.c(60,3)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

knl-ex4.c(57,13):remark #34051: REGISTER ALLOCATION : [sum3] knl-ex4.c:57

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   39[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm29]
        
    Routine temporaries
        Total         :      77
            Global    :      19
            Local     :      58
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: sum4()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sum4()) [4/4=100.0%] knl-ex4.c(67,13)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at knl-ex4.c(70,3)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference bb[auxcont] has unaligned access   [ knl-ex4.c(71,8) ]
   remark #15389: vectorization support: reference bb[auxcont] has unaligned access   [ knl-ex4.c(71,8) ]
   remark #15389: vectorization support: reference dd[auxcont] has unaligned access   [ knl-ex4.c(71,26) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.126
   remark #15301: PEEL LOOP WAS VECTORIZED

   LOOP BEGIN at <compiler generated>
      remark #15548: loop was vectorized along with the outer loop
   LOOP END
LOOP END

LOOP BEGIN at knl-ex4.c(70,3)
   remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(71,8) ]
   remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(71,8) ]
   remark #15389: vectorization support: reference dd[auxcont] has unaligned access   [ knl-ex4.c(71,26) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15416: vectorization support: irregularly indexed store was generated for the variable <aa[bb[auxcont]]>, part of index is read from memory   [ knl-ex4.c(71,5) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <aa[bb[auxcont]]>, part of index is read from memory   [ knl-ex4.c(71,5) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.085
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 9.560 
   remark #15478: estimated potential speedup: 3.760 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #15499: histogram: 2 
   remark #25015: Estimate of max trip count of loop=10000000

   LOOP BEGIN at <compiler generated>
      remark #15548: loop was vectorized along with the outer loop
   LOOP END
LOOP END

LOOP BEGIN at knl-ex4.c(70,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(71,8) ]
   remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(71,8) ]
   remark #15389: vectorization support: reference dd[auxcont] has unaligned access   [ knl-ex4.c(71,26) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.091
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=10000000

   LOOP BEGIN at <compiler generated>
      remark #15548: loop was vectorized along with the outer loop
   LOOP END
LOOP END

LOOP BEGIN at knl-ex4.c(74,3)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference bb[auxcont] has unaligned access   [ knl-ex4.c(75,8) ]
   remark #15389: vectorization support: reference bb[auxcont] has unaligned access   [ knl-ex4.c(75,8) ]
   remark #15389: vectorization support: reference aa[auxcont] has unaligned access   [ knl-ex4.c(75,26) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.126
   remark #15301: PEEL LOOP WAS VECTORIZED

   LOOP BEGIN at <compiler generated>
      remark #15548: loop was vectorized along with the outer loop
   LOOP END
LOOP END

LOOP BEGIN at knl-ex4.c(74,3)
   remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(75,8) ]
   remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(75,8) ]
   remark #15389: vectorization support: reference aa[auxcont] has unaligned access   [ knl-ex4.c(75,26) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15416: vectorization support: irregularly indexed store was generated for the variable <dd[bb[auxcont]]>, part of index is read from memory   [ knl-ex4.c(75,5) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <dd[bb[auxcont]]>, part of index is read from memory   [ knl-ex4.c(75,5) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.085
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 9.560 
   remark #15478: estimated potential speedup: 3.760 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #15499: histogram: 2 
   remark #25015: Estimate of max trip count of loop=10000000

   LOOP BEGIN at <compiler generated>
      remark #15548: loop was vectorized along with the outer loop
   LOOP END
LOOP END

LOOP BEGIN at knl-ex4.c(74,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(75,8) ]
   remark #15388: vectorization support: reference bb[auxcont] has aligned access   [ knl-ex4.c(75,8) ]
   remark #15389: vectorization support: reference aa[auxcont] has unaligned access   [ knl-ex4.c(75,26) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.091
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=10000000

   LOOP BEGIN at <compiler generated>
      remark #15548: loop was vectorized along with the outer loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

knl-ex4.c(67,13):remark #34051: REGISTER ALLOCATION : [sum4] knl-ex4.c:67

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rsi rdi r8 zmm0-zmm11 k0-k2]
        
    Routine temporaries
        Total         :     211
            Global    :     107
            Local     :     104
        Regenerable   :      27
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
