Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -O3 -fopenmp -fp-model fast=2 -qopt-report=5 -g -xhost -o nbody-v0s

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/14=7.1%] nbody-v0.cc(101,36)
  -> INLINE: (106,5) bodies(size_t) (isz = 229) (sz = 234)
    -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (33,19) operator new[](std::size_t)
      -> EXTERN: (36,16) rand()
    -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (33,19) operator new[](std::size_t)
      -> EXTERN: (36,16) rand()
    -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (33,19) operator new[](std::size_t)
      -> EXTERN: (36,16) rand()
    -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (33,19) operator new[](std::size_t)
      -> EXTERN: (36,16) rand()
    -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (33,19) operator new[](std::size_t)
      -> EXTERN: (36,16) rand()
    -> INLINE: (47,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (33,19) operator new[](std::size_t)
      -> EXTERN: (36,16) rand()
    -> INLINE: (48,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (33,19) operator new[](std::size_t)
      -> EXTERN: (36,16) rand()
  -> (109,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (110,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (110,49) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (110,57) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (110,64) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (110,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (110,79) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (110,87) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (111,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (111,48) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (111,58) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (111,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (111,75) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (111,82) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (111,92) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (113,17) omp_get_wtime()
  -> INLINE: (116,9) Newton(size_t, real) (isz = 230) (sz = 237)
  -> EXTERN: (118,10) omp_get_wtime()
  -> (122,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (123,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (123,49) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (123,57) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (123,64) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (123,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (123,79) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (123,87) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (124,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (124,48) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (124,58) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (124,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (124,75) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (124,82) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (124,92) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (126,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (126,25) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (126,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (129,5) cleanBodies() (isz = 41) (sz = 44)
    -> EXTERN: (53,5) operator delete[](void *)
    -> EXTERN: (54,5) operator delete[](void *)
    -> EXTERN: (55,5) operator delete[](void *)
    -> EXTERN: (56,5) operator delete[](void *)
    -> EXTERN: (57,5) operator delete[](void *)
    -> EXTERN: (58,5) operator delete[](void *)
    -> EXTERN: (59,5) operator delete[](void *)


    Report from: OpenMP optimizations [openmp]

nbody-v0.cc(65:5-65:5):OMP:main:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(115,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ nbody-v0.cc(65,5) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ nbody-v0.cc(65,5) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ nbody-v0.cc(65,5) ]
   remark #15382: vectorization support: call to function .0 cannot be vectorized   [ nbody-v0.cc(65,5) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ nbody-v0.cc(65,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n (116:9) and n (65:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between n (65:5) and n (116:9)
LOOP END

LOOP BEGIN at nbody-v0.cc(67,9) inlined into nbody-v0.cc(116,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v0.cc(68,9) inlined into nbody-v0.cc(116,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody-v0.cc(71,13) inlined into nbody-v0.cc(116,9)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(72,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(72,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(72,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(74,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v0.cc(71,13) inlined into nbody-v0.cc(116,9)
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(72,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(72,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(72,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(74,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.260
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 6.500 
         remark #15478: estimated potential speedup: 12.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v0.cc(71,13) inlined into nbody-v0.cc(116,9)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(72,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(72,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(72,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(74,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v0.cc(80,13) inlined into nbody-v0.cc(116,9)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(81,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(81,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(81,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(83,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v0.cc(80,13) inlined into nbody-v0.cc(116,9)
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(81,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(81,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(81,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(83,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.260
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 6.500 
         remark #15478: estimated potential speedup: 12.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v0.cc(80,13) inlined into nbody-v0.cc(116,9)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(81,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(81,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(81,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(83,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at nbody-v0.cc(92,9) inlined into nbody-v0.cc(116,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v0.cc(92,9) inlined into nbody-v0.cc(116,9)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference vx[i] has unaligned access   [ nbody-v0.cc(94,21) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference vy[i] has unaligned access   [ nbody-v0.cc(95,21) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference vz[i] has unaligned access   [ nbody-v0.cc(96,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.228
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at nbody-v0.cc(92,9) inlined into nbody-v0.cc(116,9)
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference vx[i] has unaligned access   [ nbody-v0.cc(94,21) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference vy[i] has unaligned access   [ nbody-v0.cc(95,21) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference vz[i] has unaligned access   [ nbody-v0.cc(96,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15309: vectorization support: normalized vectorization overhead 0.725
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 1.590 
      remark #15478: estimated potential speedup: 13.400 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody-v0.cc(92,9) inlined into nbody-v0.cc(116,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference vx[i] has unaligned access   [ nbody-v0.cc(94,21) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference vy[i] has unaligned access   [ nbody-v0.cc(95,21) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference vz[i] has unaligned access   [ nbody-v0.cc(96,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.228
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v0.cc(101,36):remark #34051: REGISTER ALLOCATION : [main] nbody-v0.cc:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm28 k0-k2]
        
    Routine temporaries
        Total         :     783
            Global    :     298
            Local     :     485
        Regenerable   :     151
        Spilled       :      32
        
    Routine stack
        Variables     :     148 bytes*
            Reads     :       8 [0.00e+00 ~ 0.0%]
            Writes    :      14 [4.30e+03 ~ 0.8%]
        Spills        :     336 bytes*
            Reads     :      59 [1.20e+04 ~ 2.3%]
            Writes    :      44 [3.67e+03 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::char_traits<char>::length(const std::char_traits<char>::char_type *)) [7/14=50.0%] /usr/include/c++/4.8.5/bits/char_traits.h(259,7)
  -> EXTERN: (259,16) __builtin_strlen(const char *)


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(259,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/4.8.5/bits/char_traits.h:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: randomFill(real *&, real, real, size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (randomFill(real *&, real, real, size_t)) [8/14=57.1%] nbody-v0.cc(32,59)
  -> EXTERN: (33,19) operator new[](std::size_t)
  -> EXTERN: (36,16) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v0.cc(35,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v0.cc(32,59):remark #34051: REGISTER ALLOCATION : [_Z10randomFillRPfffm] nbody-v0.cc:32

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rsi rdi r12-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      25
            Global    :      16
            Local     :       9
        Regenerable   :       0
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [1.49e+01 ~ 15.8%]
            Writes    :       6 [5.80e+00 ~ 6.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: bodies(size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (bodies(size_t)) [9/14=64.3%] nbody-v0.cc(41,25)
  -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (33,19) operator new[](std::size_t)
    -> EXTERN: (36,16) rand()
  -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (33,19) operator new[](std::size_t)
    -> EXTERN: (36,16) rand()
  -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (33,19) operator new[](std::size_t)
    -> EXTERN: (36,16) rand()
  -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (33,19) operator new[](std::size_t)
    -> EXTERN: (36,16) rand()
  -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (33,19) operator new[](std::size_t)
    -> EXTERN: (36,16) rand()
  -> INLINE: (47,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (33,19) operator new[](std::size_t)
    -> EXTERN: (36,16) rand()
  -> INLINE: (48,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (33,19) operator new[](std::size_t)
    -> EXTERN: (36,16) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(42,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(43,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(44,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(45,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(46,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(47,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

LOOP BEGIN at nbody-v0.cc(35,5) inlined into nbody-v0.cc(48,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v0.cc(36,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v0.cc(41,25):remark #34051: REGISTER ALLOCATION : [_Z6bodiesm] nbody-v0.cc:41

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rdi r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      90
            Global    :      62
            Local     :      28
        Regenerable   :      13
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :      15 [1.37e+01 ~ 2.9%]
            Writes    :      15 [1.37e+01 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cleanBodies()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cleanBodies()) [10/14=71.4%] nbody-v0.cc(52,20)
  -> EXTERN: (53,5) operator delete[](void *)
  -> EXTERN: (54,5) operator delete[](void *)
  -> EXTERN: (55,5) operator delete[](void *)
  -> EXTERN: (56,5) operator delete[](void *)
  -> EXTERN: (57,5) operator delete[](void *)
  -> EXTERN: (58,5) operator delete[](void *)
  -> EXTERN: (59,5) operator delete[](void *)


    Report from: Code generation optimizations [cg]

nbody-v0.cc(52,20):remark #34051: REGISTER ALLOCATION : [_Z11cleanBodiesv] nbody-v0.cc:52

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      13
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Newton(size_t, real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Newton(size_t, real)) [11/14=78.6%] nbody-v0.cc(63,34)


    Report from: OpenMP optimizations [openmp]

nbody-v0.cc(65:5-65:5):OMP:_Z6Newtonmf:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v0.cc(67,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v0.cc(68,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody-v0.cc(71,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(72,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(72,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(72,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(74,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v0.cc(71,13)
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(72,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(72,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(72,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(74,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.260
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 6.500 
         remark #15478: estimated potential speedup: 12.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v0.cc(71,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(72,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(72,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(72,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(74,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v0.cc(80,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(81,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(81,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(81,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(83,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v0.cc(80,13)
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(81,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(81,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(81,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(83,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.260
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 6.500 
         remark #15478: estimated potential speedup: 12.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v0.cc(80,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference x[j] has unaligned access   [ nbody-v0.cc(81,27) ]
         remark #15389: vectorization support: reference y[j] has unaligned access   [ nbody-v0.cc(81,45) ]
         remark #15389: vectorization support: reference z[j] has unaligned access   [ nbody-v0.cc(81,63) ]
         remark #15389: vectorization support: reference m[j] has unaligned access   [ nbody-v0.cc(83,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at nbody-v0.cc(92,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v0.cc(92,9)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference vx[i] has unaligned access   [ nbody-v0.cc(94,21) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference vy[i] has unaligned access   [ nbody-v0.cc(95,21) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference vz[i] has unaligned access   [ nbody-v0.cc(96,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.228
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at nbody-v0.cc(92,9)
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference vx[i] has unaligned access   [ nbody-v0.cc(94,21) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference vy[i] has unaligned access   [ nbody-v0.cc(95,21) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference vz[i] has unaligned access   [ nbody-v0.cc(96,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15309: vectorization support: normalized vectorization overhead 0.725
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 1.590 
      remark #15478: estimated potential speedup: 13.400 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody-v0.cc(92,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference x[i] has unaligned access   [ nbody-v0.cc(94,13) ]
      remark #15389: vectorization support: reference vx[i] has unaligned access   [ nbody-v0.cc(94,21) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference y[i] has unaligned access   [ nbody-v0.cc(95,13) ]
      remark #15389: vectorization support: reference vy[i] has unaligned access   [ nbody-v0.cc(95,21) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference z[i] has unaligned access   [ nbody-v0.cc(96,13) ]
      remark #15389: vectorization support: reference vz[i] has unaligned access   [ nbody-v0.cc(96,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.228
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v0.cc(63,34):remark #34051: REGISTER ALLOCATION : [_Z6Newtonmf] nbody-v0.cc:63

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm28 k0-k2]
        
    Routine temporaries
        Total         :     550
            Global    :     160
            Local     :     390
        Regenerable   :     111
        Spilled       :      29
        
    Routine stack
        Variables     :     144 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :      12 [4.40e+01 ~ 0.8%]
        Spills        :     312 bytes*
            Reads     :      55 [1.23e+02 ~ 2.3%]
            Writes    :      40 [4.08e+01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/4.8.5/bits/ios_base.h(158,3)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [14/14=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) __cxa_atexit()
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

