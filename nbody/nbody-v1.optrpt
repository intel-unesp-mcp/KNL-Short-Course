Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -O3 -fopenmp -fp-model fast=2 -qopt-report=5 -g -xhost -o nbody-v1s

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/14=7.1%] nbody-v1.cc(101,36)
  -> INLINE: (104,5) bodies(size_t) (isz = 229) (sz = 234)
    -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,19) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,19) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,19) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,19) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,19) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,19) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,19) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
  -> (106,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (107,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (107,49) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (107,57) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (107,64) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (107,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (107,79) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (107,87) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (108,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (108,48) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (108,58) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (108,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (108,75) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (108,82) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (108,92) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (110,17) omp_get_wtime()
  -> (116,9) Newton(size_t, real) (isz = 234) (sz = 241)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (118,10) omp_get_wtime()
  -> (120,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (121,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (121,49) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (121,57) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (121,64) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (121,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (121,79) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (121,87) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (122,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (122,48) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (122,58) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (122,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (122,75) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (122,82) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, float) (isz = 2) (sz = 11)
     [[ Called routine is noinline  <1>]]
  -> (122,92) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (123,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (123,25) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (123,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (125,5) cleanBodies() (isz = 41) (sz = 44)
    -> EXTERN: (50,5) operator delete[](void *)
    -> EXTERN: (51,5) operator delete[](void *)
    -> EXTERN: (52,5) operator delete[](void *)
    -> EXTERN: (53,5) operator delete[](void *)
    -> EXTERN: (54,5) operator delete[](void *)
    -> EXTERN: (55,5) operator delete[](void *)
    -> EXTERN: (56,5) operator delete[](void *)


    Report from: Offload optimizations [offload]

OFFLOAD:main(113,5):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.77
   Modifier expression assigned to __offload_free_if.78
   Modifier expression assigned to __offload_alloc_if.80
   Modifier expression assigned to __offload_free_if.81
   Modifier expression assigned to __offload_alloc_if.83
   Modifier expression assigned to __offload_free_if.84
   Modifier expression assigned to __offload_alloc_if.86
   Modifier expression assigned to __offload_free_if.87
   Modifier expression assigned to __offload_alloc_if.89
   Modifier expression assigned to __offload_free_if.90
   Modifier expression assigned to __offload_alloc_if.92
   Modifier expression assigned to __offload_free_if.93
   Modifier expression assigned to __offload_alloc_if.95
   Modifier expression assigned to __offload_free_if.96
 Data sent from host to target
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base
       m, pointer to array reference expression with base
 Data received by host from target

OFFLOAD:main(117,5):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.98
   Modifier expression assigned to __offload_free_if.99
   Modifier expression assigned to __offload_alloc_if.101
   Modifier expression assigned to __offload_free_if.102
   Modifier expression assigned to __offload_alloc_if.104
   Modifier expression assigned to __offload_free_if.105
   Modifier expression assigned to __offload_alloc_if.107
   Modifier expression assigned to __offload_free_if.108
   Modifier expression assigned to __offload_alloc_if.110
   Modifier expression assigned to __offload_free_if.111
   Modifier expression assigned to __offload_alloc_if.113
   Modifier expression assigned to __offload_free_if.114
   Modifier expression assigned to __offload_alloc_if.116
   Modifier expression assigned to __offload_free_if.117
 Data sent from host to target
 Data received by host from target
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(115,5)
   remark #15382: vectorization support: call to function Newton(size_t, real) cannot be vectorized   [ nbody-v1.cc(116,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(101,36):remark #34051: REGISTER ALLOCATION : [main] nbody-v1.cc:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   35[ rax rdx rcx rsi rdi r8-r13 zmm0-zmm23]
        
    Routine temporaries
        Total         :     434
            Global    :     129
            Local     :     305
        Regenerable   :     120
        Spilled       :       4
        
    Routine stack
        Variables     :    2692 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :     184 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :      17 [1.70e+01 ~ 1.3%]
            Writes    :      17 [1.56e+01 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Newton(size_t, real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Newton(size_t, real)) [2/14=14.3%] nbody-v1.cc(59,34)


    Report from: OpenMP optimizations [openmp]

nbody-v1.cc(63:5-63:5):OMP:_Z6Newtonmf:  OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Offload optimizations [offload]

OFFLOAD:Newton(62,5):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
 Data sent from host to target
       n, scalar size 8 bytes
       x, pointer to void
       y, pointer to void
       z, pointer to void
       m, pointer to void
       vx, pointer to void
       dtG, scalar size 4 bytes
       vy, pointer to void
       vz, pointer to void
       dt, scalar size 4 bytes
 Data received by host from target


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(65,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v1.cc(66,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody-v1.cc(69,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(70,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(70,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(70,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(72,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v1.cc(69,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(70,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(70,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(70,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(72,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.260
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 6.500 
         remark #15478: estimated potential speedup: 12.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v1.cc(69,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(70,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(70,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(70,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(72,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v1.cc(78,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(79,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(79,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(79,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(81,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v1.cc(78,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(79,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(79,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(79,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(81,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.260
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 6.500 
         remark #15478: estimated potential speedup: 12.950 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v1.cc(78,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(79,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(79,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(79,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(81,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.852
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at nbody-v1.cc(90,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v1.cc(90,9)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference *x[i] has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *x[i] has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v1.cc(92,21) ]
      remark #15389: vectorization support: reference *y[i] has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *y[i] has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v1.cc(93,21) ]
      remark #15389: vectorization support: reference *z[i] has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *z[i] has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v1.cc(94,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.228
      remark #15301: PEEL LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at nbody-v1.cc(90,9)
      remark #15389: vectorization support: reference *x[i] has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *x[i] has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v1.cc(92,21) ]
      remark #15389: vectorization support: reference *y[i] has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *y[i] has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v1.cc(93,21) ]
      remark #15389: vectorization support: reference *z[i] has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *z[i] has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v1.cc(94,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15309: vectorization support: normalized vectorization overhead 0.725
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 1.590 
      remark #15478: estimated potential speedup: 13.400 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody-v1.cc(90,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *x[i] has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *x[i] has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v1.cc(92,21) ]
      remark #15389: vectorization support: reference *y[i] has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *y[i] has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v1.cc(93,21) ]
      remark #15389: vectorization support: reference *z[i] has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *z[i] has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v1.cc(94,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.228
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
nbody-v1.cc(59,34):remark #34051: REGISTER ALLOCATION : [_Z6Newtonmf] nbody-v1.cc:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm28 k0-k2]
        
    Routine temporaries
        Total         :     696
            Global    :     176
            Local     :     520
        Regenerable   :     187
        Spilled       :      36
        
    Routine stack
        Variables     :    1396 bytes*
            Reads     :       5 [1.00e+00 ~ 0.0%]
            Writes    :      37 [5.20e+01 ~ 1.0%]
        Spills        :     368 bytes*
            Reads     :      74 [1.35e+02 ~ 2.5%]
            Writes    :      53 [4.48e+01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::char_traits<char>::length(const std::char_traits<char>::char_type *)) [8/14=57.1%] /usr/include/c++/4.8.5/bits/char_traits.h(259,7)
  -> EXTERN: (259,16) __builtin_strlen(const char *)


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(259,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/4.8.5/bits/char_traits.h:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: randomFill(real *&, real, real, size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (randomFill(real *&, real, real, size_t)) [9/14=64.3%] nbody-v1.cc(31,59)
  -> EXTERN: (32,19) operator new[](std::size_t)
  -> EXTERN: (35,16) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(34,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(31,59):remark #34051: REGISTER ALLOCATION : [_Z10randomFillRPfffm] nbody-v1.cc:31

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rsi rdi r12-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      25
            Global    :      16
            Local     :       9
        Regenerable   :       0
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [1.49e+01 ~ 15.8%]
            Writes    :       6 [5.80e+00 ~ 6.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: bodies(size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (bodies(size_t)) [10/14=71.4%] nbody-v1.cc(39,25)
  -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,19) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,19) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,19) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,19) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,19) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,19) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,19) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(40,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(41,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(42,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(43,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(44,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(45,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(46,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(39,25):remark #34051: REGISTER ALLOCATION : [_Z6bodiesm] nbody-v1.cc:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rdi r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      90
            Global    :      62
            Local     :      28
        Regenerable   :      13
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :      15 [1.37e+01 ~ 2.9%]
            Writes    :      15 [1.37e+01 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cleanBodies()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cleanBodies()) [11/14=78.6%] nbody-v1.cc(49,20)
  -> EXTERN: (50,5) operator delete[](void *)
  -> EXTERN: (51,5) operator delete[](void *)
  -> EXTERN: (52,5) operator delete[](void *)
  -> EXTERN: (53,5) operator delete[](void *)
  -> EXTERN: (54,5) operator delete[](void *)
  -> EXTERN: (55,5) operator delete[](void *)
  -> EXTERN: (56,5) operator delete[](void *)


    Report from: Code generation optimizations [cg]

nbody-v1.cc(49,20):remark #34051: REGISTER ALLOCATION : [_Z11cleanBodiesv] nbody-v1.cc:49

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      13
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/4.8.5/bits/ios_base.h(158,3)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [14/14=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) __cxa_atexit()
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

